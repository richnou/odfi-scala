#!/bin/bash
script=${1}
shift 1

echo "[Scala SCript] ATTENTION, I THINK THIS TOOL IS A FAIL"

#echo "In scala script header $$"
#echo "Script to execute: ${script}"

# Try to find a preload part
SCALA_CP_START=`awk '/^_SCALA_PRELOAD_/ {print NR + 1; exit 0; }' $script`
SCALA_CP_END=`awk '/^_EOF_SCALA_PRELOAD_/ {print NR - 1; exit 0; }' $script`
SCALA_PRELOAD=""
if [[ "${SCALA_CP_START}" != "" && "${SCALA_CP_END}" != "" ]]
then
	SCALA_PRELOAD=`sed -n ${SCALA_CP_START},${SCALA_CP_END}p $script`	
	echo "${SCALA_PRELOAD}" > /tmp/scalacp.preload.$$
	#echo "${SCALA_PRELOAD}"

	#res=`SCRIPT_LOCATION=$(dirname ${script}) bash /tmp/scalacp.$$ "$@"`
	
	
	## Every result line should contain a path to a folder or a jar

	#for pathComponent in ${res}
	#do
		#	USER_CLASSPATH="${pathComponent}:${USER_CLASSPATH}"
		
	#done

fi

if [[ -n $SCALA_PRELOAD ]]
then
	

	## Extract normal script part
	sed `let res=${SCALA_CP_START}-1 && echo $res`,`let res=${SCALA_CP_END}+1 && echo $res`d $script | tail -n +2 > /tmp/scalacp.$$

	#echo "Script to execute: `cat /tmp/scalacp.$$`"
	#echo "User CP: ${USER_CLASSPATH}"
	#echo "---"
	#echo "---"

	#exec scala -i /tmp/scalacp.preload.$$ -Dscript.location=$(dirname ${script}) /tmp/scalacp.$$ "$@"

	exec scala -e "$SCALA_PRELOAD" -Dscript.location=$(dirname ${script}) /tmp/scalacp.$$ "$@"
	rm -f /tmp/scalacp.preload.$$
	
else
	
	exec scala -Dscript.location=$(dirname ${script}) ${script} "$@"
	
fi

rm -f /tmp/scalacp.$$


!#
